{
	"info": {
		"_postman_id": "e27b690c-36e2-4912-839d-3cb9c1c38aae",
		"name": "CAPSTONE API PROJECT FIX",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20068117"
	},
	"item": [
		{
			"name": "Customers",
			"item": [
				{
					"name": "Register",
					"item": [
						{
							"name": "Register With Valid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success register\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"6464654@gmail.com\",\r\n    \"fullname\":\"anton\",\r\n    \"no_hp\":\"0813456789\",\r\n    \"password\":\"testpassword\",\r\n    \"Pin\":1234\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Existed Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email sudah digunakan\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"Dhivas@gmail.com\",\r\n    \"fullname\":\"dhivasdharma\",\r\n    \"no_hp\":\"0813456789\",\r\n    \"password\":\"dhivas\",\r\n    \"Pin\":1234\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Invalid data (email sudah digunakan)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email sudah digunakan\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"Angga@gmail.com\",\r\n    \"fullname\":\"tamadieta\",\r\n    \"no_hp\":\"05469872100\",\r\n    \"password\":\"lupapassword\",\r\n    \"Pin\":8521\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Empty Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterCustomer.Email' Error:Field validation for 'Email' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":null,\r\n    \"fullname\":\"tamadieta\",\r\n    \"no_hp\":\"05469872100\",\r\n    \"password\":\"lupapassword\",\r\n    \"Pin\":8521\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Empty Fullname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterCustomer.Fullname' Error:Field validation for 'Fullname' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"Angga@gmail.com\",\r\n    \"fullname\":null,\r\n    \"no_hp\":\"05469872100\",\r\n    \"password\":\"lupapassword\",\r\n    \"Pin\":8521\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterCustomer.Password' Error:Field validation for 'Password' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"Angga@gmail.com\",\r\n    \"fullname\":\"tamadieta\",\r\n    \"no_hp\":\"05469872100\",\r\n    \"password\":null,\r\n    \"Pin\":8521\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Empty Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterCustomer.No_hp' Error:Field validation for 'No_hp' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"Angga@gmail.com\",\r\n    \"fullname\":\"tamadieta\",\r\n    \"no_hp\": null,\r\n    \"password\":\"lupapassword\",\r\n    \"Pin\":8521\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register With Empty Pin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterCustomer.Pin' Error:Field validation for 'Pin' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"Angga@gmail.com\",\r\n    \"fullname\":\"tamadieta\",\r\n    \"no_hp\":\"05469872100\",\r\n    \"password\":\"lupapassword\",\r\n    \"Pin\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer/register",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "Login With Valid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var res = pm.response.json();\r",
											"pm.collectionVariables.set(\"token\", res.result.token);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success login\");\r",
											"});\r",
											"pm.test(\"Body matches id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/customer',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'test1@gmail.com',\r",
											"            password: 'testpassword'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"test1@gmail.com\",\r\n    \"password\":\"testpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Non-Existed Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"desta@gmail.com\",\r\n    \"password\":\"789456122\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Empty Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'AuthLogin.Email' Error:Field validation for 'Email' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":null,\r\n    \"password\":\"testpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'AuthLogin.Password' Error:Field validation for 'Password' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"test1@gmail.com\",\r\n    \"password\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"invalidemail@gmail.com\",\r\n    \"password\":\"testpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Password salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"test1@gmail.com\",\r\n    \"password\":\"invalidpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Invalid Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\");\r",
											"});\r",
											"pm.test(\"Body matches messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"test1@gmail.com\",\r\n    \"password\":\"testpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Redeem Point",
					"item": [
						{
							"name": "E-money",
							"item": [
								{
									"name": "redeem emoney",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success order emoney\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getTokenRequest = {\r",
													"  method: 'POST',\r",
													"  url: 'api-poins-id.herokuapp.com/v1/customer',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"      mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            email: 'test1@gmail.com',\r",
													"            password: 'testpassword'\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getTokenRequest, (err, response) => {\r",
													"  const jsonResponse = response.json();\r",
													"  const newAccessToken = jsonResponse.result.token;\r",
													"\r",
													"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem emoney with empty customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Customer_id' Error:Field validation for 'Customer_id' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : null,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem emoney with empty bank provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Bank_Provider' Error:Field validation for 'Bank_Provider' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : null,\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem emoney with empty phone number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Nomor' Error:Field validation for 'Nomor' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":null,\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem emoney with empty nama rekening",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.AN_Rekening' Error:Field validation for 'AN_Rekening' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":null,\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Amount' Error:Field validation for 'Amount' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : null,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty poin redeem ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Poin_redeem' Error:Field validation for 'Poin_redeem' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":null,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with non bearer token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"Customer_id\" : 1,\r\n    \"bank_provider\" : \"OVO\",\r\n    \"nomor\":\"0856354565\",\r\n    \"an_rekening\":\"Jarto\",\r\n    \"amount\" : 10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/emoney",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"emoney"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cashout",
							"item": [
								{
									"name": "redeem cashout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success order cashout\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getTokenRequest = {\r",
													"  method: 'POST',\r",
													"  url: 'api-poins-id.herokuapp.com/v1/customer',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"      mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            email: 'test1@gmail.com',\r",
													"            password: 'testpassword'\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getTokenRequest, (err, response) => {\r",
													"  const jsonResponse = response.json();\r",
													"  const newAccessToken = jsonResponse.result.token;\r",
													"  pm.globals.set(\"BEARERTOKEN\", newAccessToken)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Customer_id' Error:Field validation for 'Customer_id' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":null,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty bank provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Bank_Provider' Error:Field validation for 'Bank_Provider' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":null,\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty phone number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Nomor' Error:Field validation for 'Nomor' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":null,\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty rekening name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.AN_Rekening' Error:Field validation for 'AN_Rekening' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":null,\r\n    \"amount\":10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Amount' Error:Field validation for 'Amount' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":null,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty point redeem ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'InputTransactionBankEmoney.Poin_redeem' Error:Field validation for 'Poin_redeem' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":10000,\r\n    \"poin_redeem\":null,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with non barear token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":4,\r\n    \"bank_provider\":\"BRI\",\r\n    \"nomor\":\"05365425625\",\r\n    \"an_rekening\":\"Naruto\",\r\n    \"amount\":10000,\r\n    \"poin_redeem\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/cashout",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"cashout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Paket data",
							"item": [
								{
									"name": "redeem paket data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success redeem paket data\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const getTokenRequest = {\r",
													"  method: 'POST',\r",
													"  url: 'api-poins-id.herokuapp.com/v1/customer',\r",
													"  header: 'Content-Type:application/json',\r",
													"  body: {\r",
													"      mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            email: 'test1@gmail.com',\r",
													"            password: 'testpassword'\r",
													"        })\r",
													"  }\r",
													"};\r",
													"\r",
													"pm.sendRequest(getTokenRequest, (err, response) => {\r",
													"  const jsonResponse = response.json();\r",
													"  const newAccessToken = jsonResponse.result.token;\r",
													"  pm.globals.set(\"BEARERTOKEN\", newAccessToken)\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Customer_id' Error:Field validation for 'Customer_id' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":null,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty bank provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Bank_Provider' Error:Field validation for 'Bank_Provider' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":null,\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty phone number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Nomor' Error:Field validation for 'Nomor' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":null,\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Amount' Error:Field validation for 'Amount' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":null,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty poin redeem ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Poin_redeem' Error:Field validation for 'Poin_redeem' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":null,\r\n    \"amount\":10,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with non bearer token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/paketdata",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"paketdata"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Pulsa",
							"item": [
								{
									"name": "redeem pulsa",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success redeem pulsa\");\r",
													"});\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":1,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Customer_id' Error:Field validation for 'Customer_id' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":null,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty bank provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Bank_Provider' Error:Field validation for 'Bank_Provider' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":2,\r\n    \"bank_provider\":null,\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty phone number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Nomor' Error:Field validation for 'Nomor' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":2,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":null,\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Amount' Error:Field validation for 'Amount' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":2,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":null,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with empty poin redeem ",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Key: 'RedeemPulsaData.Poin_redeem' Error:Field validation for 'Poin_redeem' failed on the 'required' tag\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARERTOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":2,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":null,\r\n    \"amount\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								},
								{
									"name": "redeem point with non bearer token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Status code name has Error\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"Body matches Messages\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"customer_id\":2,\r\n    \"bank_provider\":\"TELKOMSEL\",\r\n    \"nomor\":\"05365425625\",\r\n    \"poin_redeem\":10000,\r\n    \"amount\":10000,\r\n    \"pin\":3123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "api-poins-id.herokuapp.com/v1/pulsa",
											"host": [
												"api-poins-id",
												"herokuapp",
												"com"
											],
											"path": [
												"v1",
												"pulsa"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Update Customer",
					"item": [
						{
							"name": "Update Valid Data User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success update customer\");\r",
											"});\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":67,\r\n    \"email\":\"gantitest@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Data With Empty ID Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'UpdateCustomer.ID' Error:Field validation for 'ID' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": null,\r\n    \"email\":\"gantitest@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"customer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "History",
					"item": [
						{
							"name": "History With Id User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/customer',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'test1@gmail.com',\r",
											"            password: 'testpassword'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"  pm.globals.set(\"BEARERTOKEN\", newAccessToken)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get history\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/history?id=1&limit=5&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"history"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "History User With Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tidak ada transaksi\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/history?id=546&limit=5&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"history"
									],
									"query": [
										{
											"key": "id",
											"value": "546"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "history with id user no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/history?id=1&limit=5&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"history"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "History With Id Transaksi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get history customer\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/customer',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'test1@gmail.com',\r",
											"            password: 'testpassword'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"  pm.globals.set(\"BEARERTOKEN\", newAccessToken)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/dethistory/EM91760388",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"dethistory",
										"EM91760388"
									]
								}
							},
							"response": []
						},
						{
							"name": "History With Invalid ID Transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"record not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/dethistory/123456",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"dethistory",
										"123456"
									]
								}
							},
							"response": []
						},
						{
							"name": "History User with id transaction no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/dethistory/EM91760388",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"dethistory",
										"EM91760388"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin Feature",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Login Admin With Valid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success login\");\r",
											"});\r",
											"pm.test(\"Body matches fullname\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"admin1\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"admin@gmail.com\",\r\n    \"password\":\"passwordadmin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Admin With Non-Existed Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'AuthLogin.Email' Error:Field validation for 'Email' failed on the 'email' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"email\": \" capstone@project.com \",\r\n      \"password\": \"kelompok25\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login WIth Empty Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'AuthLogin.Email' Error:Field validation for 'Email' failed on the 'email' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"email\": \" \",\r\n      \"password\": \"testpassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Admin With Empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'AuthLogin.Email' Error:Field validation for 'Email' failed on the 'email' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"email\": \" test@gmail.com \",\r\n      \"password\": \" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Admin With Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"admin12345@gmail.com\",\r\n    \"password\":\"passwordadmin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Admin With Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Password salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"admin@gmail.com\",\r\n    \"password\":\"abcdefg\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dashboard Admin",
					"item": [
						{
							"name": "Dashboard Admin WIth Invalid Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin1234",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dashboard Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get dashboard\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "History",
					"item": [
						{
							"name": "History Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get customer\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/history?limit=2&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"history"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "History Transaction Customer With Invalid Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"(SQLSTATE 42601)\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/history?limit=2&page=1&sort=created_at desc12345",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"history"
									],
									"query": [
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc12345"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manage Data Customer",
					"item": [
						{
							"name": "Manage Data Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get customer\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Data Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success update customer\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ID\":44,\r\n    \"email\":\"testr56@gmail.com\",\r\n    \"Fullname\":\"gantinama25\",\r\n    \"pin\":12345\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Manage Data Customer With Invalid Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin1/customer",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin1",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success delete customer\");\r",
											"});\r",
											"pm.test(\"Successful DEL request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/customer?id=11",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"customer"
									],
									"query": [
										{
											"key": "id",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer With Non-Existed Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"record not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/customer?id=450",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"customer"
									],
									"query": [
										{
											"key": "id",
											"value": "450"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manage Point Customer",
					"item": [
						{
							"name": "Update Point Customer With Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"record not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/customer/point?id=712&point=25000",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"customer",
										"point"
									],
									"query": [
										{
											"key": "id",
											"value": "712"
										},
										{
											"key": "point",
											"value": "25000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer Point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success add point\");\r",
											"});\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/customer/point?id=5&point=85000",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"customer",
										"point"
									],
									"query": [
										{
											"key": "id",
											"value": "5"
										},
										{
											"key": "point",
											"value": "85000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Approve Transaction",
					"item": [
						{
							"name": "Approve Transaction With Valid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success approve transaction\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/approve/P23974775",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"approve",
										"P23974775"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Transaction With Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"wrong id transaction\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/approve/6",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"approve",
										"6"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stock",
					"item": [
						{
							"name": "Stock Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get product\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/stock",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"stock"
									]
								}
							},
							"response": []
						},
						{
							"name": "Stock Produck With Invalid Url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin1/stock",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin1",
										"stock"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Stock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success update product\");\r",
											"});\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/stock?id=1&balance=1",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"stock"
									],
									"query": [
										{
											"key": "id",
											"value": "1"
										},
										{
											"key": "balance",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update stock with invalid id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/stock?id=100&balance=1000",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"stock"
									],
									"query": [
										{
											"key": "id",
											"value": "100"
										},
										{
											"key": "balance",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Manage Store",
					"item": [
						{
							"name": "register store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success create store\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"aghni@poin.id\",\r\n    \"password\":\"passwordstore\",\r\n    \"store\":\"store5\",\r\n    \"alamat\":\"jl.kapan kapan kita ke dufan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterStore.Email' Error:Field validation for 'Email' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": null,\r\n    \"password\":\"passwordstore\",\r\n    \"store\":\"store12\",\r\n    \"alamat\":\"jl.kapan kapan kita ke dufan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterStore.Password' Error:Field validation for 'Password' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"store1234@poin.id\",\r\n    \"password\": null,\r\n    \"store\":\"store12\",\r\n    \"alamat\":\"jl.kapan kapan kita ke dufan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with empty name store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterStore.Store' Error:Field validation for 'Store' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"store1234@poin.id\",\r\n    \"password\":\"passwordstore\",\r\n    \"store\":null,\r\n    \"alamat\":\"jl.kapan kapan kita ke dufan\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "register with empty alamat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'RegisterStore.Alamat' Error:Field validation for 'Alamat' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"store1234@poin.id\",\r\n    \"password\":\"passwordstore\",\r\n    \"store\":\"store12\",\r\n    \"alamat\":null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success delete customer\");\r",
											"});\r",
											"pm.test(\"Successful DEL request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/store?id=12",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"store"
									],
									"query": [
										{
											"key": "id",
											"value": "12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete store with non existed data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"record not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/store?id=120",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"store"
									],
									"query": [
										{
											"key": "id",
											"value": "120"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Data Store",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/store?limit=5&page=1&0sort=created_at desc&name=store12",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"store"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "0sort",
											"value": "created_at desc"
										},
										{
											"key": "name",
											"value": "store12"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "History Store",
					"item": [
						{
							"name": "history store",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get history store\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/historystore?limit=1&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"historystore"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "history store with invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"(SQLSTATE 42601)\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/historystore?limit=1&page=1&sort=created_at desc1234",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"historystore"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc1234"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transaction Pending",
					"item": [
						{
							"name": "transaction pending",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success get transaction pending\");\r",
											"});\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/transaction/pending?limit=1&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"transaction",
										"pending"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction with invalid url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin1/transaction/pending?limit=1&page=1&sort=created_at desc",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin1",
										"transaction",
										"pending"
									],
									"query": [
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "sort",
											"value": "created_at desc"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Store",
					"item": [
						{
							"name": "Update Store with Valid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success update store\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":97,\r\n    \"email\":\"storeupdate@gmail.com\",\r\n    \"store\":\"storeupdate\",\r\n    \"password\":\"testpassword\",\r\n    \"alamat\":\"updatealamat\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"store"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update store with invalid id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"wrong id store\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\":789,\r\n    \"email\":\"storeupdate@gmail.com\",\r\n    \"store\":\"storeupdate\",\r\n    \"password\":\"testpassword\",\r\n    \"alamat\":\"updatealamat\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/store",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"store"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Admin By Id",
					"item": [
						{
							"name": "Get admin by id valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/1",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin by id invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/0",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get admin by id null",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/admin/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'admin@gmail.com',\r",
											"            password: 'passwordadmin'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"\r",
											"  pm.variables.set('BEARERTOKEN', newAccessToken);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/admin/null",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"admin",
										"null"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Mitra Feature",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Login With Valid Data Mitra",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success login store\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/store/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'storebaru@poin.id',\r",
											"            password: 'rizkinabil'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"  pm.globals.set(\"BEARERTOKEN\", newAccessToken)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"storebaru@poin.id\",\r\n    \"password\":\"rizkinabil\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Non-Existed Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n      \"email\": \" capstone@project.com \",\r\n      \"password\": \"kelompok25\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login WIth Empty Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": null,\r\n    \"password\":\"passwordstore\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Empty Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'AuthStore.Password' Error:Field validation for 'Password' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"store4@poin.id\",\r\n    \"password\": null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"capstone25@gmail.com\",\r\n    \"password\":\"passwordstore\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login With Invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email salah\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"store4@poin.id\",\r\n    \"password\":\"pasword123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/login",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Input Point",
					"item": [
						{
							"name": "Input Point Mitra",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success input poin\");\r",
											"});\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const getTokenRequest = {\r",
											"  method: 'POST',\r",
											"  url: 'api-poins-id.herokuapp.com/v1/store/login',\r",
											"  header: 'Content-Type:application/json',\r",
											"  body: {\r",
											"      mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            email: 'store4@poin.id',\r",
											"            password: 'passwordstore'\r",
											"        })\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.sendRequest(getTokenRequest, (err, response) => {\r",
											"  const jsonResponse = response.json();\r",
											"  const newAccessToken = jsonResponse.result.token;\r",
											"  pm.globals.set(\"BEARERTOKEN\", newAccessToken)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\":1,\r\n    \"store_id\":1,\r\n    \"amount\":10001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Input point with invalid id customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"wrong id customer\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\":123,\r\n    \"store_id\":1,\r\n    \"amount\":10001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Input point with invalid store id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"wrong id store\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\":1,\r\n    \"store_id\":199,\r\n    \"amount\":10001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Input Point WIth empty ID Customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'InputPoin.Customer_id' Error:Field validation for 'Customer_id' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\": null,\r\n    \"store_id\":1,\r\n    \"amount\":10001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Input Point with empty store id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'InputPoin.Store_id' Error:Field validation for 'Store_id' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\":1,\r\n    \"store_id\": null,\r\n    \"amount\":10001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						},
						{
							"name": "input point with empty amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Key: 'InputPoin.Amount' Error:Field validation for 'Amount' failed on the 'required' tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARERTOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\":1,\r\n    \"store_id\":1,\r\n    \"amount\":null\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						},
						{
							"name": "input point with no token ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has Error\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches Error Messages\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"missing or malformed jwt\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"customer_id\":1,\r\n    \"store_id\":1,\r\n    \"amount\":10001\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "api-poins-id.herokuapp.com/v1/store/poin",
									"host": [
										"api-poins-id",
										"herokuapp",
										"com"
									],
									"path": [
										"v1",
										"store",
										"poin"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}